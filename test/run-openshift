#!/bin/bash
#
# Test the PHP image in OpenShift.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

THISDIR=$(dirname ${BASH_SOURCE[0]})

source ${THISDIR}/test-lib.sh
source ${THISDIR}/test-lib-openshift.sh

GIT_REPO="${GIT_REPO:-'https://github.com/sclorg/s2i-php-container.git'}"
echo "Git Repo being used: ${GIT_REPO}"
# change the branch to a different value if a new change in the example
# app needs to be tested
BRANCH_TO_TEST=master

set -eo nounset

test -n "${IMAGE_NAME-}" || false 'make sure $IMAGE_NAME is defined'
test -n "${VERSION-}" || false 'make sure $VERSION is defined'
test -n "${OS-}" || false 'make sure $OS is defined'
istag="php:$VERSION"

# DeterTesting the HTTP(S) response formine whether or not we will perform a binary fpm test
IS_FPM=false
if [[ $VERSION == *"fpm"* ]]; then
  IS_FPM=true
fi

echo "Are we testing PHP-FPM? : ${IS_FPM}"

function test_file_upload() {
  local image_name=$1
  local service_name=${image_name##*/}
  local app="https://github.com/openshift-qe/openshift-php-upload-demo"
  local ip=""

  echo "Running file upload test for: $image_name"
  ct_os_new_project
  ct_os_upload_image "$image_name" "$istag"

  ct_os_deploy_s2i_image "$istag" "$app" --name "${service_name}"
  ct_os_wait_pod_ready "$service_name" 60

  ip=$(ct_os_get_service_ip "$service_name")

  if [ $IS_FPM ]; then
    : "  Testing file upload via FCGI"
    deploy_cmd_image

    local readmeData="EOF
--data-boundary
Content-Disposition:form-data;name=\"fto\";filename=\"README.md\"
Content-Type:text/plain

some test data

--data-boundary--
EOF"
      # Upload a file into the pod using the php app
      run_cgi_fcgi_command "SCRIPT_FILENAME=upload.php REQUEST_METHOD=POST CONTENT_LENGTH=136 CONTENT_TYPE=\"multipart/form-data;boundary=data-boundary\" cgi-fcgi -bind -connect ${ip}:9000 <<${readmeData}"

  else
    # Wait until the app is prepared to receive files
    curl "$ip:8080" 2>/dev/null | grep -q "OpenShift File Upload Demonstration"

    # Upload a file into the pod using the php app
    curl -F fto=@README.md "$ip:8080/upload.php" &>/dev/null

  fi

  local result=0
  ct_os_run_in_pod "$(ct_os_get_pod_name "$service_name")" ls uploaded/README.md >/dev/null || result = 1

  if [ $result -eq 0 ] ; then
    echo "  Check passed."
  else
    echo "  Check failed."
  fi

  ct_os_delete_project
}

function ct_os_test_s2i_app_fpm() {
  local image_name=${1}
  local app=${2}
  local context_dir=${3}
  local expected_output=${4}
  local port=${5:-9000}

  if [ $# -lt 4 ] || [ -z "${1}" -o -z "${2}" -o -z "${3}" -o -z "${4}" ]; then
    echo "ERROR: ct_os_test_s2i_app() requires at least 4 arguments that cannot be emtpy." >&2
    return 1
  fi

  ct_os_test_s2i_app_func "${image_name}" \
                          "${app}" \
                          "${context_dir}" \
                          "ct_os_test_fpm_response_internal '<IP>:${port}' '${expected_output}'"
}

ct_os_test_fpm_response_internal() {
  local destination="$1"
  local body_regexp="$2"

echo "Destination: ${destination}"
  : "  Testing the FCGI response for <${destination}>"

  deploy_cmd_image
  # Run cgi-fcgi test
  run_cgi_fcgi_command "SCRIPT_FILENAME=index.php REQUEST_METHOD=GET cgi-fcgi -bind -connect ${destination}" ${body_regexp}
}

run_cgi_fcgi_command() {
  local fcgi_command="$1"
  local body_regexp="${2:-}"

  local result=0
  local response_file=$(mktemp /tmp/ct_test_response_XXXXXX)

  # Run cgi-fcgi test
  echo "Running cgi-fcgi command..."
  ct_os_cmd_image_run "${fcgi_command}" >${response_file}

  cat ${response_file} | grep -qP -e "${body_regexp}" || result=1;

  return ${result}
}

deploy_cmd_image() {
  local util_image_name='centos/s2i-base-centos7'
  local result=0
  # Deploy the command image
  ct_os_deploy_cmd_image "${util_image_name}" 2>/dev/null || true

  echo "Installing fcgi on command image..."
  # Install fcgi on command image
  ct_os_cmd_image_run "rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" &>/dev/null
  ct_os_cmd_image_run "yum -y install fcgi" &>/dev/null
}

ct_os_cluster_up

# Check whether to perform regular HTTP-based tests or PHP-FPM binary stream-based tests
ct_app_test=ct_os_test_s2i_app
ct_image_update_response_test='ct_test_response "http://<IP>:8080" "200" "Test PHP passed"'
if [[ $IS_FPM ]]; then
  ct_app_test=ct_os_test_s2i_app_fpm
  ct_image_update_response_test='ct_os_test_fpm_response_internal "<IP>:9000" "Test PHP passed"'
fi

# test local app
${ct_app_test} ${IMAGE_NAME} "${GIT_REPO}" ${VERSION}/test/test-app 'Test PHP passed'

${ct_app_test} ${IMAGE_NAME} "https://github.com/sclorg/cakephp-ex.git#${BRANCH_TO_TEST}" . 'Welcome to your CakePHP application on OpenShift'

# cakephp template does not work with version 5.6 nor is it currently setup to work with PHP-FPM
if [[ "${VERSION}" > "5.6" && ! $IS_FPM ]] ; then
  ct_os_test_template_app ${IMAGE_NAME} \
                        https://raw.githubusercontent.com/sclorg/cakephp-ex/${BRANCH_TO_TEST}/openshift/templates/cakephp.json \
                        php \
                        'Welcome to your CakePHP application on OpenShift' \
                        8080 http 200 "-p SOURCE_REPOSITORY_REF=${BRANCH_TO_TEST} -p SOURCE_REPOSITORY_URL=https://github.com/sclorg/cakephp-ex.git -p PHP_VERSION=${VERSION%%[-a-zA-Z]*} -p NAME=php-testing"
fi

# test image update with s2ideploy_cmd_image
case "$OS" in
  rhel7) old_image=rhscl/php-${VERSION/./}-rhel7 ;;
# Fedora image isn't in registry yet
#  fedora) old_image=${IMAGE_NAME/localhost\//}
  *) old_image=centos/php-${VERSION/./}-centos7 ;;
esac

ct_os_test_image_update "$IMAGE_NAME" "${old_image}" "$istag" \
                        "${ct_image_update_response_test}" \
                        "$istag~${GIT_REPO}" \
                        --context-dir="$VERSION/test/test-app"

test_file_upload "$IMAGE_NAME"
